// Generated by CoffeeScript 1.3.3
(function() {

  window.Animation = (function() {

    Animation.prototype.defaults = {
      frameWidth: 60,
      spriteWidth: 660,
      timeout: 70
    };

    function Animation(spriteElement, opts) {
      this.spriteElement = spriteElement;
      this.opts = $.extend({}, this.defaults, opts);
      this.curPx = 0;
      this.ti = null;
      this.running = false;
    }

    Animation.prototype.frameFactory = function() {
      var frame, self;
      self = this;
      frame = function() {
        $(self.spriteElement).css({
          "background-position": "" + self.curPx + "px 0px"
        });
        self.curPx -= self.opts.frameWidth;
        if (self.curPx <= -self.opts.spriteWidth) {
          self.curPx = 0;
        }
        return self.ti = setTimeout(self.frameFactory(), self.opts.timeout);
      };
      return frame;
    };

    Animation.prototype.start = function() {
      if (this.running) {
        return false;
      }
      this.ti = setTimeout(this.frameFactory(), this.timeout);
      this.running = true;
      return true;
    };

    Animation.prototype.stop = function() {
      if (!this.running) {
        return false;
      }
      clearTimeout(this.ti);
      this.running = false;
      return true;
    };

    return Animation;

  })();

  window.Spinner = (function() {

    Spinner.prototype.defaults = {
      width: 60,
      height: 60,
      frameCount: 11,
      timeout: 70
    };

    function Spinner(opts) {
      this.opts = $.extend({}, this.defaults, opts);
      this.spinner = $("<div class=\"spinner\"></div>")[0];
      this.animation = new Animation(this.spinner, {
        frameWidth: this.opts.width,
        spriteWidth: this.opts.width * this.opts.frameCount,
        timeout: this.opts.timeout
      });
    }

    Spinner.prototype.spin = function(element) {
      var left, top;
      this.element = element;
      top = (this.element.offsetHeight - this.opts.height) / 2;
      left = (this.element.offsetWidth - this.opts.width) / 2;
      $(this.element).css({
        position: "relative"
      });
      $(this.spinner).css({
        top: "" + top + "px",
        left: "" + left + "px"
      });
      this.element.appendChild(this.spinner);
      this.animation.start();
      return this;
    };

    Spinner.prototype.stop = function() {
      this.animation.stop();
      return this.element.removeChild(this.spinner);
    };

    return Spinner;

  })();

  $.fn.spin = function(opts) {
    this.each(function() {
      var $this, data;
      $this = $(this);
      data = $this.data();
      if (data.spinner) {
        data.spinner.stop();
        delete data.spinner;
      }
      if (opts !== false) {
        return data.spinner = new Spinner(opts).spin(this);
      }
    });
    return this;
  };

}).call(this);
